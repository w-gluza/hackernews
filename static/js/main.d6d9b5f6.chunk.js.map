{"version":3,"sources":["styledComponents/Main.js","styledComponents/Author.js","styledComponents/Button.js","styledComponents/Story.js","styledComponents/StoryFooter.js","components/Frame.js","styledComponents/Head.js","components/Header.js","styledComponents/Global.js","App.js","serviceWorker.js","index.js"],"names":["styled","main","_templateObject","p","Author_templateObject","button","Button_templateObject","div","Story_templateObject","StoryFooter_templateObject","Frame","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","articles","frameUrl","frameID","prevProps","_this2","links","map","link","linkIndex","fetch","then","response","json","data","setState","url","id","_this3","react_default","a","createElement","Main","className","object","Story","key","title","StoryFooter","Author","by","Button","onClick","style","color","src","Component","header","Head_templateObject","Header","Head","createGlobalStyle","Global_templateObject","App","slice","Fragment","Global","Header_Header","components_Frame","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d6d9b5f6.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport default styled.main`\n  display: grid;\n  grid-template-columns: 1fr 2fr;\n`;\n","import styled from 'styled-components';\n\nexport default styled.p`\n  color: gray;\n  font-size: 1.4rem;\n`;\n","import styled from 'styled-components';\n\nexport default styled.button`\n  color: #ffc124;\n  font-size: 1.4rem;\n  line-height: 1.8;\n  border-bottom: 0.01rem solid;\n`;\n","import styled from 'styled-components';\n\nexport default styled.div`\n  min-height: 8rem;\n  padding: 2rem;\n  border-bottom: 0.1rem solid;\n  display: grid;\n  grid-template-rows: 1fr 1fr;\n  grid-gap: 1.5rem;\n`;\n","import styled from 'styled-components';\n\nexport default styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-end;\n`;\n","import React, { Component } from 'react';\n\nimport Main from '../styledComponents/Main';\nimport Author from '../styledComponents/Author';\nimport Button from '../styledComponents/Button';\nimport Story from '../styledComponents/Story';\nimport StoryFooter from '../styledComponents/StoryFooter';\n\nclass Frame extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      articles: [],\n      frameUrl: [],\n      frameID: []\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.links === this.props.links) {\n      return;\n    }\n\n    let links = this.props.links;\n    links.map((link, linkIndex) =>\n      fetch(link)\n        .then(response => response.json())\n        .then(data =>\n          this.setState(state => {\n            const frameUrl = state.frameUrl ? state.frameUrl : data.url;\n            const frameID = state.frameID ? state.frameID : data.id;\n            const articles = state.articles;\n            articles[linkIndex] = data;\n            frameUrl[linkIndex] = data.url;\n            frameID[linkIndex] = data.id;\n            return { articles, frameUrl, frameID };\n          })\n        )\n    );\n  }\n\n  render() {\n    return (\n      <Main>\n        <aside className=\"aside\">\n          {this.state.articles.map(object => (\n            <Story key={object.id} id={object.id}>\n              <h2>{object.title}</h2>\n              <StoryFooter>\n                <Author>Posted by: {object.by}</Author>\n                <Button\n                  onClick={() => {\n                    this.setState({\n                      frameUrl: object.url,\n                      frameID: object.id\n                    });\n                  }}\n                  style={\n                    this.state.frameID === object.id\n                      ? { color: '#ffc124' }\n                      : { color: '#424242' }\n                  }\n                >\n                  Visit Website\n                </Button>\n              </StoryFooter>\n            </Story>\n          ))}\n        </aside>\n        <article>\n          <iframe\n            className=\"iframe\"\n            title={this.state.frameID}\n            key={this.state.frameID}\n            src={this.state.frameUrl}\n          />\n        </article>\n      </Main>\n    );\n  }\n}\nexport default Frame;\n","import styled from 'styled-components';\n\nexport default styled.header`\n  background-color: #ffc124;\n  height: 5rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n","import React, { Component } from 'react';\nimport Head from '../styledComponents/Head';\n\nexport default class Header extends Component {\n  render() {\n    return (\n      <Head>\n        <h1>Uizard Hacker News</h1>\n      </Head>\n    );\n  }\n}\n","import { createGlobalStyle } from 'styled-components';\n\nexport default createGlobalStyle`\n@import url('https://fonts.googleapis.com/css?family=Lato:300,400,700');\n\n/* -------- SIMPLE RESET ------------- */\n*,\n*::after,\n*::before {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  box-sizing: border-box;\n  list-style: none;\n  border: none;\n  text-decoration: none;\n  background-color: transparent;\n  font-family: 'Lato', Helvetica, Arial, Verdana, Tahoma;\n}\n\nhtml {\n  /* This define what 1rem is */\n  /* 10px/16pc = 62,5% --> 1rem = 10px; */\n  font-size: 62.5%;\n  height: 100%;\n  width: 100%;\n}\n\nbutton,\na:link,\na:visited,\na:hover,\na:active {\n  cursor: pointer;\n}\n/* ------------------------------------- */\nh1 {\nfont-size: 2rem;\n  font-weight: 700;\n  line-height: 1.5;\n  letter-spacing: 0.15em;\n  color: #ffffff;\n}\n\nh2 {\n  font-size: 1.4rem;\n  font-weight: 700;\n  line-height: 1.5;\n  letter-spacing: 0.15em;\n  color: #424242;\n\n}\n\n.aside {\n  display: grid;\n  grid-template-rows: repeat(12 1fr);\n}\n.iframe {\n  height: 100%;\n  width: 100%;\n}\np {\n  line-height: 1.8;\n}\n`;\n","import React, { Component } from 'react';\nimport Frame from './components/Frame';\nimport Header from './components/Header';\n\nimport GlobalStyle from './styledComponents/Global';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      data: []\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://hacker-news.firebaseio.com/v0/topstories.json?print=pretty')\n      .then(response => response.json())\n      .then(data => this.setState({ data: data }));\n  }\n\n  render() {\n    const topStories = this.state.data.slice(0, 10);\n    // console.log(topStories);\n    let links = topStories.map(\n      link =>\n        ' https://hacker-news.firebaseio.com/v0/item/' +\n        link +\n        '.json?print=pretty'\n    );\n    return (\n      <>\n        <GlobalStyle />\n        <Header />\n        <Frame links={links} />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}